{"version":3,"sources":["components/Game/scenes/bootScene.js","components/Game/scenes/mainScene.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["BootScene","key","this","game","canvas","width","height","loadText","add","text","fontFamily","fontSize","Math","min","setOrigin","load","image","spritesheet","frameWidth","frameHeight","on","progress","setText","scene","start","Phaser","Scene","MainScene","gameMap","setInteractive","useHandCursor","setDisplaySize","player","sprite","anims","create","frames","generateFrameNames","frameRate","repeat","play","x","y","tweens","targets","duration","ease","NavGame","window","devicePixelRatio","Game","backgroundColor","type","AUTO","scale","parent","mode","Scale","FIT","document","documentElement","clientHeight","clientWidth","id","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOA4BeA,E,kDAxBX,aAAe,uCACL,CAAEC,IAAK,c,mDAGT,IAAD,EACuBC,KAAKC,KAAKC,OAA5BC,EADL,EACKA,MAAOC,EADZ,EACYA,OACfJ,KAAKK,SAAWL,KAAKM,IAAIC,KAAKJ,EAAQ,EAAGC,EAAS,EAAG,UAAW,CAC5DI,WAAY,QACZC,SAAS,GAAD,OAAKC,KAAKC,IAAIR,EAAOC,GAAU,GAA/B,QACTQ,UAAU,M,gCAGN,IAAD,OACNZ,KAAKa,KAAKC,MAAM,MAAO,uCACvBd,KAAKa,KAAKE,YAAY,OAAQ,uCAAwC,CAClEC,WAAY,GACZC,YAAa,MAEjBjB,KAAKa,KAAKK,GAAG,YAAY,SAAAC,GAAQ,OAC7B,EAAKd,SAASe,QAAd,qBAAoCD,OACxCnB,KAAKa,KAAKK,GAAG,YAAY,kBAAM,EAAKG,MAAMC,MAAM,oB,GAtBhCC,IAAOC,OCiChBC,E,kDA/BX,aAAe,uCACL,CAAE1B,IAAK,c,qDAGP,IAAD,SACqBC,KAAKC,KAAKC,OAA5BC,EADH,EACGA,MAAOC,EADV,EACUA,OACfJ,KAAK0B,QAAU1B,KAAKM,IAAIQ,MAAM,EAAG,EAAG,OACpCd,KAAK0B,QAAQd,UAAU,GAAGe,eAAe,CAAEC,eAAe,IAC1D,IAAMjB,EAAMD,KAAKC,IAAIR,EAAOC,GAC5BJ,KAAK0B,QAAQG,eAAelB,EAAKA,GAEjC,IAAMmB,EAAS9B,KAAKM,IAAIyB,OAAO5B,EAAQ,EAAGC,EAAS,EAAG,OAAQ,GACzDQ,UAAU,GAAK,GAEpBZ,KAAKgC,MAAMC,OAAO,CACdlC,IAAK,OACLmC,OAAQlC,KAAKgC,MAAMG,mBAAmB,QACtCC,UAAW,GACXC,QAAS,IAGbP,EAAOQ,KAAK,QACZtC,KAAK0B,QAAQR,GAAG,eAAe,gBAAGqB,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAN,OAAc,EAAKC,OAAOnC,IAAI,CACzDoC,QAASZ,EACTa,SAAU,IACVC,KAAM,SACNL,IAAGC,a,GA5BSjB,IAAOC,OC6BhBqB,E,kLAvBKC,OAAOC,iBACnB/C,KAAKC,KAAO,IAAIsB,IAAOyB,KAAK,CACxB3B,MAAO,CAACvB,EAAW2B,GACnBwB,gBAAiB,UACjBC,KAAM3B,IAAO4B,KACbC,MAAO,CACHC,OAAQ,cACRC,KAAM/B,IAAOgC,MAAMC,IACnBpD,OAAQqD,SAASC,gBAAgBC,aACjCxD,MAAOsD,SAASC,gBAAgBE,iB,+BAMxC,OAAO,yBAAKC,GAAG,kB,8CAIf,OAAO,M,GAtBOC,aCEPC,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASc,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5de211ab.chunk.js","sourcesContent":["import Phaser from \"phaser\";\n\nclass BootScene extends Phaser.Scene {\n\n    constructor() {\n        super({ key: 'bootScene' });\n    }\n\n    init() {\n        const { width, height } = this.game.canvas;\n        this.loadText = this.add.text(width / 2, height / 2, \"Loading\", {\n            fontFamily: 'Arial',\n            fontSize: `${Math.min(width, height) / 10}px`\n        }).setOrigin(0.5);\n    }\n\n    preload() {\n        this.load.image('map', 'phaser-world-nav/GameAssets/map.png');\n        this.load.spritesheet('idle', 'phaser-world-nav/GameAssets/idle.png', {\n            frameWidth: 96,\n            frameHeight: 160,\n        })\n        this.load.on('progress', progress =>\n            this.loadText.setText(`Loading ...${progress}`));\n        this.load.on('complete', () => this.scene.start('mainScene'));\n    }\n}\n\nexport default BootScene;","import Phaser from 'phaser';\n\nclass MainScene extends Phaser.Scene {\n\n    constructor() {\n        super({ key: 'mainScene' });\n    }\n\n    create() {\n        const { width, height } = this.game.canvas;\n        this.gameMap = this.add.image(0, 0, 'map');\n        this.gameMap.setOrigin(0).setInteractive({ useHandCursor: true });\n        const min = Math.min(width, height);\n        this.gameMap.setDisplaySize(min, min);\n\n        const player = this.add.sprite(width / 2, height / 2, 'idle', 0)\n            .setOrigin(0.5, 1)\n\n        this.anims.create({\n            key: 'idle',\n            frames: this.anims.generateFrameNames('idle'),\n            frameRate: 10,\n            repeat: -1,\n\n        });\n        player.play('idle');\n        this.gameMap.on('pointerdown', ({ x, y }) => this.tweens.add({\n            targets: player,\n            duration: 1000,\n            ease: 'Linear',\n            x, y\n        }))\n    }\n}\n\nexport default MainScene","import React, { Component } from 'react';\nimport Phaser from 'phaser';\nimport BootScene from './scenes/bootScene';\nimport MainScene from './scenes/mainScene';\n\nclass NavGame extends Component {\n\n    componentDidMount() {\n        const DPR = window.devicePixelRatio;\n        this.game = new Phaser.Game({\n            scene: [BootScene, MainScene],\n            backgroundColor: '#000000',\n            type: Phaser.AUTO,\n            scale: {\n                parent: 'phaser-game',\n                mode: Phaser.Scale.FIT,\n                height: document.documentElement.clientHeight,// * DPR,\n                width: document.documentElement.clientWidth //* DPR\n            }\n        });\n    }\n\n    render() {\n        return <div id=\"phaser-game\" />;\n    }\n\n    shouldComponentUpdate() {\n        return false;\n    }\n}\n\nexport default NavGame;","import React from 'react';\nimport NavGame from './components/Game/Game';\n\nfunction App() {\n  return <NavGame />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}