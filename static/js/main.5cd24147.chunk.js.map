{"version":3,"sources":["components/Game/scenes/bootScene.js","components/Game/gameObjects/follower.js","components/Game/scenes/mainScene.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["BootScene","key","this","game","canvas","width","height","loadText","add","text","fontFamily","fontSize","Math","min","setOrigin","load","image","spritesheet","frameWidth","frameHeight","tilemapTiledJSON","on","progress","setText","scene","start","Phaser","Scene","FollowerSprite","x","y","navMesh","texture","path","currentTarget","physics","world","enable","existing","events","update","once","destroy","targetPoint","findPath","Vector2","length","shift","time","deltaTime","body","velocity","set","distance","Distance","Between","emitMovement","emit","moveTowards","isGoingDown","isGoingRight","callback","directionState","FollowerDirection","TOP_LEFT","TOP_RIGHT","BOTTOM_LEFT","BOTTOM_RIGHT","targetPosition","maxSpeed","elapsedSeconds","angle","Angle","targetSpeed","magnitude","velocityFromRotation","off","GameObjects","Sprite","MainScene","anims","create","frames","generateFrameNames","frameRate","repeat","health","setDepth","mappy","tilemap","tileset","addTilesetImage","createStaticLayer","objectLayer","getObjectLayer","objects","console","log","navMeshPlugin","buildMeshFromTiled","items","createFromObjects","map","sprite","play","setScale","player","onTopLeftMovement","setFlipX","onTopRightMovement","onBottomLeftMovement","onBottomRightMovement","onMovementComplete","forEach","item","addOverlap","disable","tweens","targets","duration","alpha","from","to","onComplete","input","pointer","goTo","NavGame","window","devicePixelRatio","Game","plugins","plugin","PhaserNavMeshPlugin","mapping","backgroundColor","type","AUTO","scale","parent","mode","Scale","FIT","default","arcade","gravity","id","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cd24147.chunk.js","sourcesContent":["import Phaser from \"phaser\";\n\nclass BootScene extends Phaser.Scene {\n\n    constructor() {\n        super({ key: 'bootScene' });\n    }\n\n    init() {\n        const { width, height } = this.game.canvas;\n        this.loadText = this.add.text(width / 2, height / 2, \"Loading\", {\n            fontFamily: 'Arial',\n            fontSize: `${Math.min(width, height) / 10}px`\n        }).setOrigin(0.5);\n    }\n\n    preload() {\n        //this.load.setBaseURL(\"./phaser-world-nav\")\n        this.load.image('map', 'GameAssets/map.png');\n        this.load.spritesheet('idle', 'GameAssets/idle.png', {\n            frameWidth: 96,\n            frameHeight: 160,\n        })\n        this.load.spritesheet('walk', 'GameAssets/walk.png', {\n            frameWidth: 120,\n            frameHeight: 192,\n        })\n        this.load.spritesheet('frontWalk', 'GameAssets/frontWalk.png', {\n            frameWidth: 120,\n            frameHeight: 192,\n        })\n\n        this.load.spritesheet('health', 'GameAssets/saveIcon.png', {\n            frameWidth: 100,\n            frameHeight: 90\n        })\n        this.load.tilemapTiledJSON('mappy', 'GameAssets/gameMap.json');\n        this.load.on('progress', progress =>\n            this.loadText.setText(`Loading ...${progress}`));\n        this.load.on('complete', () => this.scene.start('mainScene'));\n    }\n}\n\nexport default BootScene;","import Phaser from 'phaser';\nclass FollowerSprite extends Phaser.GameObjects.Sprite {\n    /**\n     * @param {Phaser.Scene} scene\n     * @param {*} x\n     * @param {*} y\n     * @param {*} navMesh\n     * @param {*} wallLayer\n     * @memberof FollowerSprite\n     */\n    constructor(scene, x, y, navMesh, texture) {\n        super(scene, x, y, texture);\n\n        this.navMesh = navMesh;\n        this.path = null;\n        this.currentTarget = null;\n        this.scene = scene;\n\n        // Enable arcade physics for moving with velocity\n        scene.physics.world.enable(this);\n\n        scene.add.existing(this);\n        scene.events.on(\"update\", this.update, this);\n        scene.events.once(\"shutdown\", this.destroy, this);\n    }\n\n    goTo(targetPoint) {\n        // Find a path to the target\n        this.path = this.navMesh.findPath(new Phaser.Math.Vector2(this.x, this.y), targetPoint);\n\n        // If there is a valid path, grab the first point from the path and set it as the target\n        if (this.path && this.path.length > 0) this.currentTarget = this.path.shift();\n        else this.currentTarget = null;\n    }\n\n    update(time, deltaTime) {\n        // Bugfix: Phaser's event emitter caches listeners, so it's possible to get updated once after\n        // being destroyed\n        if (!this.body) return;\n\n        // Stop any previous movement\n        this.body.velocity.set(0);\n\n        if (this.currentTarget) {\n            // Check if we have reached the current target (within a fudge factor)\n            const { x, y } = this.currentTarget;\n            const distance = Phaser.Math.Distance.Between(this.x, this.y, x, y);\n            this.emitMovement(x, y);\n            if (distance < 5) {\n                // If there is path left, grab the next point. Otherwise, null the target.\n                if (this.path.length > 0) this.currentTarget = this.path.shift();\n                else {\n                    this.currentTarget = null;\n                    this.emit('onMovementComplete');\n                }\n            }\n\n            // Still got a valid target?\n            if (this.currentTarget) this.moveTowards(this.currentTarget, 200, deltaTime / 1000);\n        }\n    }\n\n    emitMovement(x, y) {\n        const isGoingDown = y > this.y;\n        const isGoingRight = x > this.x;\n        if (isGoingDown && isGoingRight)\n            this.emit('bottomRightMovement');\n        else if (isGoingDown && !isGoingRight)\n            this.emit('bottomLeftMovement')\n        else if (!isGoingDown && isGoingRight)\n            this.emit('topRightMovement');\n        else\n            this.emit('topLeftMovement');\n    }\n\n    onTopLeftMovement(callback) {\n        return this.on('topLeftMovement', () => {\n            if (this.directionState !== FollowerDirection.TOP_LEFT) {\n                callback();\n                this.directionState = FollowerDirection.TOP_LEFT;\n            }\n        });\n    }\n\n    onTopRightMovement(callback) {\n        return this.on('topRightMovement', () => {\n            if (this.directionState !== FollowerDirection.TOP_RIGHT) {\n                callback();\n                this.directionState = FollowerDirection.TOP_RIGHT;\n            }\n        });\n    }\n\n    onBottomLeftMovement(callback) {\n        return this.on('bottomLeftMovement', () => {\n            if (this.directionState !== FollowerDirection.BOTTOM_LEFT) {\n                callback();\n                this.directionState = FollowerDirection.BOTTOM_LEFT;\n            }\n        });\n    }\n\n    onBottomRightMovement(callback) {\n        return this.on('bottomRightMovement', () => {\n            if (this.directionState !== FollowerDirection.BOTTOM_RIGHT) {\n                callback();\n                this.directionState = FollowerDirection.BOTTOM_RIGHT;\n            }\n        });\n    }\n\n    onMovementComplete(callback) {\n        return this.on('onMovementComplete', ()=>{\n            this.directionState = null;\n            callback()\n        });\n    }\n\n    moveTowards(targetPosition, maxSpeed = 200, elapsedSeconds) {\n        const { x, y } = targetPosition;\n        const angle = Phaser.Math.Angle.Between(this.x, this.y, x, y);\n        const distance = Phaser.Math.Distance.Between(this.x, this.y, x, y);\n        const targetSpeed = distance / elapsedSeconds;\n        const magnitude = Math.min(maxSpeed, targetSpeed);\n        this.scene.physics.velocityFromRotation(angle, magnitude, this.body.velocity);\n    }\n\n    destroy() {\n        if (this.scene) this.scene.events.off(\"update\", this.update, this);\n        super.destroy();\n    }\n}\n\nconst FollowerDirection = {\n    TOP_LEFT: 0,\n    TOP_RIGHT: 1,\n    BOTTOM_LEFT: 2,\n    BOTTOM_RIGHT: 3\n\n}\n\nexport default FollowerSprite;","import Phaser from 'phaser';\nimport FollowerSprite from '../gameObjects/follower';\n\nclass MainScene extends Phaser.Scene {\n\n    constructor() {\n        super({ key: 'mainScene' });\n    }\n\n    preload() {\n        this.anims.create({\n            key: 'idle',\n            frames: this.anims.generateFrameNames('idle'),\n            frameRate: 8,\n            repeat: -1,\n        });\n        this.anims.create({\n            key: 'walk',\n            frames: this.anims.generateFrameNames('walk'),\n            frameRate: 10,\n            repeat: -1,\n        });\n        this.anims.create({\n            key: 'frontWalk',\n            frames: this.anims.generateFrameNames('frontWalk'),\n            frameRate: 10,\n            repeat: -1,\n        });\n        this.anims.create({\n            key: 'rotateIcon',\n            frames: this.anims.generateFrameNames('health'),\n            frameRate: 10,\n            repeat: -1\n        })\n    }\n\n    create() {\n        this.health = 0;\n        this.text = this.add.text(0, 0, 'Health: 0', { fontFamily: 'Arial', fontSize: '5em' })\n            .setDepth(1);\n        const mappy = this.add.tilemap('mappy');\n        const tileset = mappy.addTilesetImage('map');\n        mappy.createStaticLayer('background', [tileset], 0, 0);\n        const objectLayer = mappy.getObjectLayer('navMesh');\n        const { x, y, width, height } = objectLayer.objects[0];\n        console.log(objectLayer);\n        const navMesh = this.navMeshPlugin.buildMeshFromTiled('mesh', objectLayer, 4);\n\n        const items = mappy.createFromObjects('items', 3376, 'health')\n            .map(sprite => sprite\n                .play('rotateIcon')\n                .setScale(1));\n        const player = new FollowerSprite(this, x + width / 2, y + height / 2, navMesh, 'idle')\n            .setOrigin(0.5, 0.9)\n            .onTopLeftMovement(() => {\n                player.play('frontWalk');\n                player.setFlipX(false);\n            }).onTopRightMovement(() => {\n                player.play('frontWalk');\n                player.setFlipX(true);\n            }).onBottomLeftMovement(() => {\n                player.play('walk');\n                player.setFlipX(false);\n            }).onBottomRightMovement(() => {\n                player.play('walk');\n                player.setFlipX(true);\n            }).onMovementComplete(() => player.play('idle'))\n        player.play('idle');\n        items.forEach(item => this.physics.world.enable(item));\n\n        this.physics.world.addOverlap(player, items,\n            (player, item) => {\n                this.physics.world.disable(item);\n                this.health++;\n                this.text.setText(`Health: ${this.health}`)\n                this.tweens.add({\n                    targets: item,\n                    x: 0,\n                    y: 0,\n                    duration: 1500,\n                    alpha: { from: 1, to: 0.25 },\n                    onComplete: () => item.destroy()\n                })\n            });\n\n        this.input.on('pointerdown', pointer => {\n            player.goTo(new Phaser.Math.Vector2(pointer.x, pointer.y));\n        })\n    }\n}\n\nexport default MainScene","import React, { Component } from 'react';\nimport Phaser from 'phaser';\nimport PhaserNavMeshPlugin from 'phaser-navmesh';\nimport BootScene from './scenes/bootScene';\nimport MainScene from './scenes/mainScene';\n\nclass NavGame extends Component {\n\n    componentDidMount() {\n        const DPR = window.devicePixelRatio;\n        this.game = new Phaser.Game({\n            plugins: {\n                scene: [\n                    {\n                        key: \"PhaserNavMeshPlugin\",\n                        plugin: PhaserNavMeshPlugin,\n                        mapping: \"navMeshPlugin\",\n                        start: true\n                    }\n                ]\n            },\n            scene: [BootScene, MainScene],\n            backgroundColor: '#000000',\n            type: Phaser.AUTO,\n            scale: {\n                parent: 'phaser-game',\n                mode: Phaser.Scale.FIT,\n                height: 720,//* DPR,\n                width: 1200,// * DPR,\n                //zoom: 1 / DPR\n            },\n            physics: {\n                default: \"arcade\",\n                arcade: {\n                    gravity: 0\n                }\n            }\n        });\n    }\n\n    render() {\n        return <div id=\"phaser-game\" />;\n    }\n\n    shouldComponentUpdate() {\n        return false;\n    }\n}\n\nexport default NavGame;","import React from 'react';\nimport NavGame from './components/Game/Game';\n\nfunction App() {\n  return <NavGame />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}